{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\WEB\\\\FPT_net\\\\fptnet\\\\client\\\\src\\\\page\\\\Messenger\\\\Messenger.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport MainLayout from \"../../component/MainPage/MainLayout\";\nimport ChatBoxContainer from \"./childComponents/ChatBoxComps/ChatBoxContainer\";\nimport ContactSideBar from \"./childComponents/ContactSideBar\";\nimport \"./Messenger.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst URL_MAIN = process.env.REACT_APP_URL_MAIN || \"https://fanserverapi.herokuapp.com\";\nexport default function Messenger() {\n  _s();\n\n  const [listFriends, setListFriends] = useState([]);\n  const [listTeachers, setListTeachers] = useState([]);\n  const [listGroups, setListGroups] = useState([]);\n  const [currentConvs, setCurrentConvs] = useState({});\n  const [totalMessages, setTotalMessages] = useState(0);\n  const [messages, setMessages] = useState([]);\n  const [blocks, setBlocks] = useState(0);\n  const targetId = useRef(\"\");\n\n  const userId = JSON.parse(localStorage.getItem(\"loginData\")).user._id; // get data from list contacts\n\n\n  const handleGetSingleConvs = (e, contactInfo) => {\n    e.stopPropagation();\n    setCurrentConvs(contactInfo);\n    targetId.current = contactInfo.id;\n    console.log(\"ðŸš€ ~ file: Messenger.jsx ~ line 29 ~ handleGetSingleConvs ~ targetId.current\", targetId.current);\n    console.log(\"ðŸš€ ~ file: Messenger.jsx ~ line 26 ~ handleGetConvs ~ contactInfo\", currentConvs);\n    getConvsId(userId, targetId.current).then(res => {\n      return res;\n    }).then(convsId => {\n      // just get block 1 of conversation (test)\n      getConvsMessages(userId, convsId, 1).then(res => {\n        setMessages(res);\n        console.log(messages);\n      });\n    });\n  }; // block messages calculator\n\n\n  const calBlocks = totalMess => {\n    return (totalMess - totalMess % 20) / 20 + !!(totalMess % 20);\n  }; // get conversation id\n\n\n  const getConvsId = async (uId, tId) => {\n    let result;\n\n    try {\n      result = await axios.post(`${URL_MAIN}/api/conversation/getfriendconv`, {\n        userId: uId,\n        friendId: tId\n      });\n    } catch (err) {\n      console.log(err.message);\n    }\n\n    return result;\n  }; // get block message\n\n\n  const getConvsMessages = async (uId, tId, blocksIndex) => {\n    let result;\n\n    try {\n      result = await axios.post(`${URL_MAIN}/api/message/get`, {\n        userId: uId,\n        conversationId: tId,\n        block: blocksIndex\n      });\n    } catch (err) {\n      console.log(err.message);\n    }\n\n    return result;\n  }; // get friend list\n\n\n  const getListFriends = async userId => {\n    let result;\n\n    try {\n      result = await axios.post(`${URL_MAIN}/api/friend/get`, {\n        userId: userId\n      }, {\n        header: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n    return result;\n  }; // get list teacher\n\n\n  const getListTeachers = async userId => {\n    let result;\n\n    try {\n      result = await axios.get(`${URL_MAIN}/api/user/teachers`);\n    } catch (err) {\n      console.log(err);\n    }\n\n    return result.data.teachers;\n  }; //take list groups here\n\n\n  const getListGroups = async userId => {\n    let result;\n\n    try {\n      result = await axios.post(`${URL_MAIN}/api/group/conversation/getconvs`, {\n        userId: userId\n      }, {\n        header: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n    return result;\n  }; //take data for the first times\n\n\n  useEffect(() => {\n    let isMounted = true; //run this to take the friend list\n\n    getListFriends(userId).then(res => {\n      // if component umount before we get api, drop it\n      if (isMounted) setListFriends(res.data.friends);\n    }).catch(err => console.log(err)); // run this to take teacherlist\n\n    getListTeachers(userId).then(res => {\n      // if component umount before we get api, drop it\n      if (isMounted) setListTeachers(res);\n    }).catch(err => console.log(err)); // run this to take group list\n\n    getListGroups(userId).then(res => {\n      // if component umount before we get api, drop it\n      if (isMounted) {\n        var data = res.data.conversations;\n        setListGroups(data);\n      }\n    }).catch(err => console.log(err));\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n  useEffect(() => {});\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Messenger\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"MessengerContainer\",\n        children: [/*#__PURE__*/_jsxDEV(ContactSideBar, {\n          listFriends: listFriends,\n          listTeachers: listTeachers,\n          listGroups: listGroups,\n          OnClickContactBtn: handleGetSingleConvs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChatBoxContainer, {\n          contactInfo: currentConvs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Messenger, \"cjy4V20Wd1WQd7oe2Ro+vmx5Etg=\");\n\n_c = Messenger;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messenger\");","map":{"version":3,"sources":["D:/Code/WEB/FPT_net/fptnet/client/src/page/Messenger/Messenger.jsx"],"names":["axios","React","useState","useEffect","useRef","MainLayout","ChatBoxContainer","ContactSideBar","URL_MAIN","process","env","REACT_APP_URL_MAIN","Messenger","listFriends","setListFriends","listTeachers","setListTeachers","listGroups","setListGroups","currentConvs","setCurrentConvs","totalMessages","setTotalMessages","messages","setMessages","blocks","setBlocks","targetId","userId","JSON","parse","localStorage","getItem","user","_id","handleGetSingleConvs","e","contactInfo","stopPropagation","current","id","console","log","getConvsId","then","res","convsId","getConvsMessages","calBlocks","totalMess","uId","tId","result","post","friendId","err","message","blocksIndex","conversationId","block","getListFriends","header","getListTeachers","get","data","teachers","getListGroups","isMounted","friends","catch","conversations"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport MainLayout from \"../../component/MainPage/MainLayout\";\r\nimport ChatBoxContainer from \"./childComponents/ChatBoxComps/ChatBoxContainer\";\r\nimport ContactSideBar from \"./childComponents/ContactSideBar\";\r\n\r\nimport \"./Messenger.css\";\r\n\r\nconst URL_MAIN =\r\n  process.env.REACT_APP_URL_MAIN || \"https://fanserverapi.herokuapp.com\";\r\n\r\nexport default function Messenger() {\r\n  const [listFriends, setListFriends] = useState([]);\r\n  const [listTeachers, setListTeachers] = useState([]);\r\n  const [listGroups, setListGroups] = useState([]);\r\n\r\n  const [currentConvs, setCurrentConvs] = useState({});\r\n  const [totalMessages, setTotalMessages] = useState(0);\r\n  const [messages, setMessages] = useState([]);\r\n  const [blocks, setBlocks] = useState(0);\r\n\r\n  const targetId = useRef(\"\");\r\n  const userId = JSON.parse(localStorage.getItem(\"loginData\")).user._id;\r\n\r\n  // get data from list contacts\r\n  const handleGetSingleConvs = (e, contactInfo) => {\r\n    e.stopPropagation();\r\n    setCurrentConvs(contactInfo);\r\n    targetId.current = contactInfo.id;\r\n    console.log(\r\n      \"ðŸš€ ~ file: Messenger.jsx ~ line 29 ~ handleGetSingleConvs ~ targetId.current\",\r\n      targetId.current\r\n    );\r\n\r\n    console.log(\r\n      \"ðŸš€ ~ file: Messenger.jsx ~ line 26 ~ handleGetConvs ~ contactInfo\",\r\n      currentConvs\r\n    );\r\n\r\n    getConvsId(userId, targetId.current)\r\n      .then((res) => {\r\n        return res;\r\n      })\r\n      .then((convsId) => {\r\n        // just get block 1 of conversation (test)\r\n        getConvsMessages(userId, convsId, 1).then((res) => {\r\n          setMessages(res);\r\n          console.log(messages);\r\n        });\r\n      });\r\n  };\r\n\r\n  // block messages calculator\r\n  const calBlocks = (totalMess) => {\r\n    return (totalMess - (totalMess % 20)) / 20 + !!(totalMess % 20);\r\n  };\r\n\r\n  // get conversation id\r\n  const getConvsId = async (uId, tId) => {\r\n    let result;\r\n    try {\r\n      result = await axios.post(`${URL_MAIN}/api/conversation/getfriendconv`, {\r\n        userId: uId,\r\n        friendId: tId,\r\n      });\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n    return result;\r\n  };\r\n  // get block message\r\n  const getConvsMessages = async (uId, tId, blocksIndex) => {\r\n    let result;\r\n    try {\r\n      result = await axios.post(`${URL_MAIN}/api/message/get`, {\r\n        userId: uId,\r\n        conversationId: tId,\r\n        block: blocksIndex,\r\n      });\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // get friend list\r\n  const getListFriends = async (userId) => {\r\n    let result;\r\n    try {\r\n      result = await axios.post(\r\n        `${URL_MAIN}/api/friend/get`,\r\n        {\r\n          userId: userId,\r\n        },\r\n        {\r\n          header: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // get list teacher\r\n  const getListTeachers = async (userId) => {\r\n    let result;\r\n    try {\r\n      result = await axios.get(`${URL_MAIN}/api/user/teachers`);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    return result.data.teachers;\r\n  };\r\n\r\n  //take list groups here\r\n  const getListGroups = async (userId) => {\r\n    let result;\r\n    try {\r\n      result = await axios.post(\r\n        `${URL_MAIN}/api/group/conversation/getconvs`,\r\n        {\r\n          userId: userId,\r\n        },\r\n        {\r\n          header: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  //take data for the first times\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    //run this to take the friend list\r\n    getListFriends(userId)\r\n      .then((res) => {\r\n        // if component umount before we get api, drop it\r\n        if (isMounted) setListFriends(res.data.friends);\r\n      })\r\n      .catch((err) => console.log(err));\r\n\r\n    // run this to take teacherlist\r\n    getListTeachers(userId)\r\n      .then((res) => {\r\n        // if component umount before we get api, drop it\r\n        if (isMounted) setListTeachers(res);\r\n      })\r\n      .catch((err) => console.log(err));\r\n\r\n    // run this to take group list\r\n    getListGroups(userId)\r\n      .then((res) => {\r\n        // if component umount before we get api, drop it\r\n        if (isMounted) {\r\n          var data = res.data.conversations;\r\n          setListGroups(data);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {});\r\n\r\n  return (\r\n    <>\r\n      <MainLayout />\r\n      <div className=\"Messenger\">\r\n        <div className=\"MessengerContainer\">\r\n          {/* friend list */}\r\n\r\n          <ContactSideBar\r\n            listFriends={listFriends}\r\n            listTeachers={listTeachers}\r\n            listGroups={listGroups}\r\n            OnClickContactBtn={handleGetSingleConvs}\r\n          />\r\n\r\n          {/* chatbox */}\r\n\r\n          <ChatBoxContainer contactInfo={currentConvs} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}