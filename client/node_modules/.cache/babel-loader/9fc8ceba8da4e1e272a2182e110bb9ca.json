{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\WEB\\\\FPT_net\\\\fptnet\\\\client\\\\src\\\\page\\\\Messenger\\\\childComponents\\\\ChatBoxComps\\\\ChatBox.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport ChatBoxMain from \"./ChatBoxMain\";\nimport ChatBoxMessage from \"./ChatBoxMessage\";\nimport ChatBoxMessageOwnerUser from \"./ChatBoxMessageOwnerUser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst URL_MAIN = process.env.REACT_APP_URL_MAIN || `https://fanserverapi.herokuapp.com`;\nconst block = 1; //testing\n\nexport default function ChatBox(props) {\n  _s();\n\n  const {\n    chatData,\n    userId,\n    onCurrentConvsIdChange\n  } = props;\n  const [convsId, setConvsId] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [isAPISucceed, setIsAPISucceed] = useState();\n\n  const getFriendConvsId = async (userId, targetId) => {\n    let result;\n\n    try {\n      result = await axios.post(`${URL_MAIN}/api/conversation/getfriendconv`, {\n        userId: userId,\n        friendId: targetId\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n    return result;\n  };\n\n  const getFriendMessages = async (userId, convsId, block) => {\n    let result;\n\n    try {\n      result = await axios.post(`${URL_MAIN}/api/message/getblock`, {\n        userId: userId,\n        conversationId: convsId,\n        block: block\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n    return result;\n  };\n\n  const getGroupMessages = async (userId, convsId, block) => {\n    let result;\n\n    try {\n      result = await axios.post(`${URL_MAIN}/api/group/message/getblock`, {\n        userId: userId,\n        conversationId: convsId,\n        block: block\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n    return result;\n  };\n\n  useEffect(() => {\n    // set messages default null value\n    setMessages(null);\n\n    if (chatData.convs_type === \"group\") {\n      // Lift-state up\n      onCurrentConvsIdChange(chatData.targetId); // get block messages from conversation id\n\n      getGroupMessages(userId, chatData.targetId, block).then(res => {\n        const result = res.data.messages;\n        setMessages(result);\n      }).catch(err => {\n        setMessages([]);\n        console.log(err.message);\n      });\n    } else {\n      // get friend conversation here\n      getFriendConvsId(userId, chatData.targetId).then(res => {\n        const convsId = res.data.conversation._id; //Lift-state up\n\n        onCurrentConvsIdChange(convsId); // after that get messages\n\n        if (res.data.success) return getFriendMessages(userId, convsId, block);else setMessages([]);\n      }).then(res => {\n        if (res.data.success) {\n          const result = res.data.messages;\n          setMessages(result);\n        } else {\n          setMessages([]);\n        }\n      }).catch(err => {\n        setMessages([]);\n        console.log(err.messages);\n      });\n    }\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatBox\",\n      children: messages ? /*#__PURE__*/_jsxDEV(ChatBoxMain, {\n        messages: messages,\n        userId: userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ChatBox, \"AjMvfPyWWsrptu4WDEcxiwiA6vE=\");\n\n_c = ChatBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"sources":["D:/Code/WEB/FPT_net/fptnet/client/src/page/Messenger/childComponents/ChatBoxComps/ChatBox.jsx"],"names":["axios","React","useEffect","useState","ChatBoxMain","ChatBoxMessage","ChatBoxMessageOwnerUser","URL_MAIN","process","env","REACT_APP_URL_MAIN","block","ChatBox","props","chatData","userId","onCurrentConvsIdChange","convsId","setConvsId","messages","setMessages","isAPISucceed","setIsAPISucceed","getFriendConvsId","targetId","result","post","friendId","err","console","log","getFriendMessages","conversationId","getGroupMessages","convs_type","then","res","data","catch","message","conversation","_id","success"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport ChatBoxMain from \"./ChatBoxMain\";\r\nimport ChatBoxMessage from \"./ChatBoxMessage\";\r\nimport ChatBoxMessageOwnerUser from \"./ChatBoxMessageOwnerUser\";\r\n\r\nconst URL_MAIN =\r\n  process.env.REACT_APP_URL_MAIN || `https://fanserverapi.herokuapp.com`;\r\n\r\nconst block = 1; //testing\r\n\r\nexport default function ChatBox(props) {\r\n  const { chatData, userId, onCurrentConvsIdChange } = props;\r\n\r\n  const [convsId, setConvsId] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [isAPISucceed, setIsAPISucceed] = useState();\r\n\r\n  const getFriendConvsId = async (userId, targetId) => {\r\n    let result;\r\n    try {\r\n      result = await axios.post(`${URL_MAIN}/api/conversation/getfriendconv`, {\r\n        userId: userId,\r\n        friendId: targetId,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const getFriendMessages = async (userId, convsId, block) => {\r\n    let result;\r\n    try {\r\n      result = await axios.post(`${URL_MAIN}/api/message/getblock`, {\r\n        userId: userId,\r\n        conversationId: convsId,\r\n        block: block,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const getGroupMessages = async (userId, convsId, block) => {\r\n    let result;\r\n    try {\r\n      result = await axios.post(`${URL_MAIN}/api/group/message/getblock`, {\r\n        userId: userId,\r\n        conversationId: convsId,\r\n        block: block,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // set messages default null value\r\n    setMessages(null);\r\n    if (chatData.convs_type === \"group\") {\r\n      // Lift-state up\r\n      onCurrentConvsIdChange(chatData.targetId);\r\n      // get block messages from conversation id\r\n      getGroupMessages(userId, chatData.targetId, block)\r\n        .then((res) => {\r\n          const result = res.data.messages;\r\n          setMessages(result);\r\n        })\r\n        .catch((err) => {\r\n          setMessages([]);\r\n          console.log(err.message);\r\n        });\r\n    } else {\r\n      // get friend conversation here\r\n      getFriendConvsId(userId, chatData.targetId)\r\n        .then((res) => {\r\n          const convsId = res.data.conversation._id;\r\n          //Lift-state up\r\n          onCurrentConvsIdChange(convsId);\r\n          // after that get messages\r\n          if (res.data.success)\r\n            return getFriendMessages(userId, convsId, block);\r\n          else setMessages([]);\r\n        })\r\n        .then((res) => {\r\n          if (res.data.success) {\r\n            const result = res.data.messages;\r\n            setMessages(result);\r\n          } else {\r\n            setMessages([]);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          setMessages([]);\r\n          console.log(err.messages);\r\n        });\r\n    }\r\n  }, [props]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"ChatBox\">\r\n        {messages ? <ChatBoxMain messages={messages} userId={userId} /> : <></>}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}