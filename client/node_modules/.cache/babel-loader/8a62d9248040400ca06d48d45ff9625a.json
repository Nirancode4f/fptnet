{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\WEB\\\\FPT_net\\\\fptnet\\\\client\\\\src\\\\page\\\\Messenger\\\\childComponents\\\\ChatBoxComps\\\\ChatBox.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport ChatBoxMain from \"./ChatBoxMain\";\nimport ChatBoxMessage from \"./ChatBoxMessage\";\nimport ChatBoxMessageOwnerUser from \"./ChatBoxMessageOwnerUser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst URL_MAIN = process.env.REACT_APP_URL_MAIN || `https://fanserverapi.herokuapp.com`;\nconst block = 1; //testing\n\nexport default function ChatBox(props) {\n  _s();\n\n  const {\n    chatData,\n    userId\n  } = props;\n  const [convsId, setConvsId] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [isAPISucceed, setIsAPISucceed] = useState();\n\n  const getFriendConvsId = async (userId, targetId) => {\n    let result;\n\n    try {\n      result = await axios.post(`${URL_MAIN}/api/conversation/getfriendconv`, {\n        userId: userId,\n        friendId: targetId\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n    return result;\n  };\n\n  const getFriendMessages = async (userId, convsId, block) => {\n    let result;\n\n    try {\n      result = await axios.post(`${URL_MAIN}/api/message/getblock`, {\n        userId: userId,\n        conversationId: convsId,\n        block: block\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n    return result;\n  };\n\n  useEffect(() => {\n    if (chatData.convs_type === \"friend\") {\n      // get friend conversation here\n      console.log(chatData.targetId);\n      getFriendConvsId(userId, chatData.targetId).then(res => {\n        // setIsAPISucceed(res.data.success);\n        const convsId = res.data.conversation._id;\n        console.log(\"ðŸš€ ~ file: ChatBox.jsx ~ line 50 ~ .then ~ convsId\", res.data); // after that get messages\n\n        if (res.data.success) return getFriendMessages(userId, convsId, block);else setMessages([]);\n      }).then(res => {\n        if (res.data.success) {\n          const result = res.data.messages;\n          setMessages(result);\n          console.log(result);\n        } else {\n          setMessages([]);\n        }\n      }).catch(err => console.log(err.messages));\n    }\n  }, [chatData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatBox\",\n      children: messages ? /*#__PURE__*/_jsxDEV(ChatBoxMain, {\n        messages: messages,\n        userId: userId,\n        targetAvtSrc: chatData.targetAvt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ChatBox, \"AjMvfPyWWsrptu4WDEcxiwiA6vE=\");\n\n_c = ChatBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"sources":["D:/Code/WEB/FPT_net/fptnet/client/src/page/Messenger/childComponents/ChatBoxComps/ChatBox.jsx"],"names":["axios","React","useEffect","useState","ChatBoxMain","ChatBoxMessage","ChatBoxMessageOwnerUser","URL_MAIN","process","env","REACT_APP_URL_MAIN","block","ChatBox","props","chatData","userId","convsId","setConvsId","messages","setMessages","isAPISucceed","setIsAPISucceed","getFriendConvsId","targetId","result","post","friendId","err","console","log","getFriendMessages","conversationId","convs_type","then","res","data","conversation","_id","success","catch","targetAvt"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport ChatBoxMain from \"./ChatBoxMain\";\r\nimport ChatBoxMessage from \"./ChatBoxMessage\";\r\nimport ChatBoxMessageOwnerUser from \"./ChatBoxMessageOwnerUser\";\r\n\r\nconst URL_MAIN =\r\n  process.env.REACT_APP_URL_MAIN || `https://fanserverapi.herokuapp.com`;\r\n\r\nconst block = 1; //testing\r\n\r\nexport default function ChatBox(props) {\r\n  const { chatData, userId } = props;\r\n  const [convsId, setConvsId] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [isAPISucceed, setIsAPISucceed] = useState();\r\n\r\n  const getFriendConvsId = async (userId, targetId) => {\r\n    let result;\r\n    try {\r\n      result = await axios.post(`${URL_MAIN}/api/conversation/getfriendconv`, {\r\n        userId: userId,\r\n        friendId: targetId,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const getFriendMessages = async (userId, convsId, block) => {\r\n    let result;\r\n    try {\r\n      result = await axios.post(`${URL_MAIN}/api/message/getblock`, {\r\n        userId: userId,\r\n        conversationId: convsId,\r\n        block: block,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (chatData.convs_type === \"friend\") {\r\n      // get friend conversation here\r\n      console.log(chatData.targetId);\r\n      getFriendConvsId(userId, chatData.targetId)\r\n        .then((res) => {\r\n          // setIsAPISucceed(res.data.success);\r\n          const convsId = res.data.conversation._id;\r\n          console.log(\r\n            \"ðŸš€ ~ file: ChatBox.jsx ~ line 50 ~ .then ~ convsId\",\r\n            res.data\r\n          );\r\n\r\n          // after that get messages\r\n          if (res.data.success)\r\n            return getFriendMessages(userId, convsId, block);\r\n          else setMessages([]);\r\n        })\r\n        .then((res) => {\r\n          if (res.data.success) {\r\n            const result = res.data.messages;\r\n            setMessages(result);\r\n            console.log(result);\r\n          } else {\r\n            setMessages([]);\r\n          }\r\n        })\r\n        .catch((err) => console.log(err.messages));\r\n    }\r\n  }, [chatData]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"ChatBox\">\r\n        {messages ? (\r\n          <ChatBoxMain\r\n            messages={messages}\r\n            userId={userId}\r\n            targetAvtSrc={chatData.targetAvt}\r\n          />\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}